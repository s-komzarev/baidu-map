import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { isString } from '../helpers/object';
export var LOADING_STATE;
(function (LOADING_STATE) {
    LOADING_STATE[LOADING_STATE["NON"] = 0] = "NON";
    LOADING_STATE[LOADING_STATE["LOADED"] = 1] = "LOADED";
    LOADING_STATE[LOADING_STATE["LOADING"] = 2] = "LOADING";
})(LOADING_STATE || (LOADING_STATE = {}));
export class ScriptLoaderConfig {
    constructor() {
        this.ak = '';
    }
}
let ScriptLoader = class ScriptLoader {
    constructor() {
        window._scriptLoadState = {};
        window._loadingCallbacks = {};
    }
    load(url, isMain = false, cb) {
        // tslint:disable: no-string-literal
        const scriptKey = isString(url) ? url : url['key'];
        const scriptUrls = isString(url) ? [url] : url['scripts'];
        // tslint:enable: no-string-literal
        if (window._scriptLoadState[scriptKey] === LOADING_STATE.LOADED) {
            if (isMain) {
                switchDisplay('baidu-map .baidu-map-instance', 'block');
                switchDisplay('baidu-map .baidu-map-offline', 'none');
            }
            return cb();
        }
        if (!window._loadingCallbacks[scriptKey]) {
            window._loadingCallbacks[scriptKey] = [];
        }
        if (window._scriptLoadState[scriptKey] === LOADING_STATE.LOADING) {
            window._loadingCallbacks[scriptKey].push(cb);
            return;
        }
        window._scriptLoadState[scriptKey] = LOADING_STATE.LOADING;
        window._loadingCallbacks[scriptKey].push(cb);
        if (isMain) {
            window.baidumapinit = () => {
                window._scriptLoadState[scriptKey] = LOADING_STATE.LOADED;
                switchDisplay('baidu-map .baidu-map-instance', 'block');
                switchDisplay('baidu-map .baidu-map-offline', 'none');
                window._loadingCallbacks[scriptKey].forEach((c) => {
                    c();
                });
            };
        }
        appendScriptsTag(scriptKey, scriptUrls, isMain);
    }
};
ScriptLoader = tslib_1.__decorate([
    Injectable()
], ScriptLoader);
export { ScriptLoader };
function appendScriptsTag(scriptKey, urls, isMain) {
    const leftObj = {
        count: urls.length
    };
    urls.forEach(url => {
        appendScriptTag(scriptKey, url, isMain, leftObj);
    });
}
function appendScriptTag(scriptKey, url, isMain, leftObj) {
    const script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;
    script.onerror = () => {
        if (isMain) {
            switchDisplay('baidu-map .baidu-map-offline', 'block');
            switchDisplay('baidu-map .baidu-map-instance', 'none');
        }
        document.body.removeChild(script);
        setTimeout(() => {
            appendScriptTag(scriptKey, url, isMain, leftObj);
        }, 30000);
    };
    if (!isMain) {
        script.onload = () => {
            leftObj.count--;
            if (leftObj.count) {
                return;
            }
            window._scriptLoadState[scriptKey] = LOADING_STATE.LOADED;
            window._loadingCallbacks[scriptKey].forEach((c) => {
                c();
            });
        };
    }
    document.body.appendChild(script);
}
function switchDisplay(selector, state) {
    Array.prototype.slice
        .call(document.querySelectorAll(selector))
        .forEach((node) => {
        node.style.display = state;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0TG9hZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItYmFpZHUtbWFwLyIsInNvdXJjZXMiOlsibGliL3Byb3ZpZGVycy9zY3JpcHRMb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDMUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRzVDLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDdkIsK0NBQU8sQ0FBQTtJQUNQLHFEQUFVLENBQUE7SUFDVix1REFBVyxDQUFBO0FBQ2IsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxPQUFPLGtCQUFrQjtJQUEvQjtRQUNTLE9BQUUsR0FBRyxFQUFFLENBQUE7SUFDaEIsQ0FBQztDQUFBO0FBR0QsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBWTtJQUN2QjtRQUNFLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUE7UUFDNUIsTUFBTSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQTtJQUMvQixDQUFDO0lBRU0sSUFBSSxDQUNULEdBQXdCLEVBQ3hCLFNBQWtCLEtBQUssRUFDdkIsRUFBYztRQUVkLG9DQUFvQztRQUNwQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ2xELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3pELG1DQUFtQztRQUVuQyxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxhQUFhLENBQUMsTUFBTSxFQUFF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O1FBQ1gsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDbkIsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFBO1lBQ2YsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO2dCQUNqQixPQUFNO2FBQ1A7WUFDRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQTtZQUN6RCxNQUFNLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBYSxFQUFFLEVBQUU7Z0JBQzVELENBQUMsRUFBRSxDQUFBO1lBQ0wsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDLENBQUE7S0FDRjtJQUNELFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ25DLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxRQUFnQixFQUFFLEtBQWE7SUFDcEQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLO1NBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDekMsT0FBTyxDQUFDLENBQUMsSUFBaUIsRUFBRSxFQUFFO1FBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtJQUM1QixDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi9oZWxwZXJzL29iamVjdCdcclxuaW1wb3J0IHsgU2NyaXB0VHlwZSB9IGZyb20gJy4uL3R5cGVzL1NjcmlwdCdcclxuXHJcbmV4cG9ydCBlbnVtIExPQURJTkdfU1RBVEUge1xyXG4gIE5PTiA9IDAsXHJcbiAgTE9BREVEID0gMSxcclxuICBMT0FESU5HID0gMlxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2NyaXB0TG9hZGVyQ29uZmlnIHtcclxuICBwdWJsaWMgYWsgPSAnJ1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTY3JpcHRMb2FkZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgd2luZG93Ll9zY3JpcHRMb2FkU3RhdGUgPSB7fVxyXG4gICAgd2luZG93Ll9sb2FkaW5nQ2FsbGJhY2tzID0ge31cclxuICB9XHJcblxyXG4gIHB1YmxpYyBsb2FkKFxyXG4gICAgdXJsOiBzdHJpbmcgfCBTY3JpcHRUeXBlLFxyXG4gICAgaXNNYWluOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICBjYjogKCkgPT4gdm9pZFxyXG4gICk6IHZvaWQge1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGU6IG5vLXN0cmluZy1saXRlcmFsXHJcbiAgICBjb25zdCBzY3JpcHRLZXkgPSBpc1N0cmluZyh1cmwpID8gdXJsIDogdXJsWydrZXknXVxyXG4gICAgY29uc3Qgc2NyaXB0VXJscyA9IGlzU3RyaW5nKHVybCkgPyBbdXJsXSA6IHVybFsnc2NyaXB0cyddXHJcbiAgICAvLyB0c2xpbnQ6ZW5hYmxlOiBuby1zdHJpbmctbGl0ZXJhbFxyXG5cclxuICAgIGlmICh3aW5kb3cuX3NjcmlwdExvYWRTdGF0ZVtzY3JpcHRLZXldID09PSBMT0FESU5HX1NUQVRFLkxPQURFRCkge1xyXG4gICAgICBpZiAoaXNNYWluKSB7XHJcbiAgICAgICAgc3dpdGNoRGlzcGxheSgnYmFpZHUtbWFwIC5iYWlkdS1tYXAtaW5zdGFuY2UnLCAnYmxvY2snKVxyXG4gICAgICAgIHN3aXRjaERpc3BsYXkoJ2JhaWR1LW1hcCAuYmFpZHUtbWFwLW9mZmxpbmUnLCAnbm9uZScpXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGNiKClcclxuICAgIH1cclxuICAgIGlmICghd2luZG93Ll9sb2FkaW5nQ2FsbGJhY2tzW3NjcmlwdEtleV0pIHtcclxuICAgICAgd2luZG93Ll9sb2FkaW5nQ2FsbGJhY2tzW3NjcmlwdEtleV0gPSBbXVxyXG4gICAgfVxyXG4gICAgaWYgKHdpbmRvdy5fc2NyaXB0TG9hZFN0YXRlW3NjcmlwdEtleV0gPT09IExPQURJTkdfU1RBVEUuTE9BRElORykge1xyXG4gICAgICB3aW5kb3cuX2xvYWRpbmdDYWxsYmFja3Nbc2NyaXB0S2V5XS5wdXNoKGNiKVxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIHdpbmRvdy5fc2NyaXB0TG9hZFN0YXRlW3NjcmlwdEtleV0gPSBMT0FESU5HX1NUQVRFLkxPQURJTkdcclxuICAgIHdpbmRvdy5fbG9hZGluZ0NhbGxiYWNrc1tzY3JpcHRLZXldLnB1c2goY2IpXHJcblxyXG4gICAgaWYgKGlzTWFpbikge1xyXG4gICAgICB3aW5kb3cuYmFpZHVtYXBpbml0ID0gKCkgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5fc2NyaXB0TG9hZFN0YXRlW3NjcmlwdEtleV0gPSBMT0FESU5HX1NUQVRFLkxPQURFRFxyXG4gICAgICAgIHN3aXRjaERpc3BsYXkoJ2JhaWR1LW1hcCAuYmFpZHUtbWFwLWluc3RhbmNlJywgJ2Jsb2NrJylcclxuICAgICAgICBzd2l0Y2hEaXNwbGF5KCdiYWlkdS1tYXAgLmJhaWR1LW1hcC1vZmZsaW5lJywgJ25vbmUnKVxyXG4gICAgICAgIHdpbmRvdy5fbG9hZGluZ0NhbGxiYWNrc1tzY3JpcHRLZXldLmZvckVhY2goKGM6ICgpID0+IHZvaWQpID0+IHtcclxuICAgICAgICAgIGMoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGFwcGVuZFNjcmlwdHNUYWcoc2NyaXB0S2V5LCBzY3JpcHRVcmxzLCBpc01haW4pXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBlbmRTY3JpcHRzVGFnKFxyXG4gIHNjcmlwdEtleTogc3RyaW5nLFxyXG4gIHVybHM6IEFycmF5PHN0cmluZz4sXHJcbiAgaXNNYWluOiBib29sZWFuXHJcbikge1xyXG4gIGNvbnN0IGxlZnRPYmogPSB7XHJcbiAgICBjb3VudDogdXJscy5sZW5ndGhcclxuICB9XHJcbiAgdXJscy5mb3JFYWNoKHVybCA9PiB7XHJcbiAgICBhcHBlbmRTY3JpcHRUYWcoc2NyaXB0S2V5LCB1cmwsIGlzTWFpbiwgbGVmdE9iailcclxuICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBlbmRTY3JpcHRUYWcoXHJcbiAgc2NyaXB0S2V5OiBzdHJpbmcsXHJcbiAgdXJsOiBzdHJpbmcsXHJcbiAgaXNNYWluOiBib29sZWFuLFxyXG4gIGxlZnRPYmo6IHsgY291bnQ6IG51bWJlciB9XHJcbikge1xyXG4gIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpXHJcbiAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0J1xyXG4gIHNjcmlwdC5zcmMgPSB1cmxcclxuICBzY3JpcHQub25lcnJvciA9ICgpID0+IHtcclxuICAgIGlmIChpc01haW4pIHtcclxuICAgICAgc3dpdGNoRGlzcGxheSgnYmFpZHUtbWFwIC5iYWlkdS1tYXAtb2ZmbGluZScsICdibG9jaycpXHJcbiAgICAgIHN3aXRjaERpc3BsYXkoJ2JhaWR1LW1hcCAuYmFpZHUtbWFwLWluc3RhbmNlJywgJ25vbmUnKVxyXG4gICAgfVxyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JpcHQpXHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGFwcGVuZFNjcmlwdFRhZyhzY3JpcHRLZXksIHVybCwgaXNNYWluLCBsZWZ0T2JqKVxyXG4gICAgfSwgMzAwMDApXHJcbiAgfVxyXG5cclxuICBpZiAoIWlzTWFpbikge1xyXG4gICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgbGVmdE9iai5jb3VudC0tXHJcbiAgICAgIGlmIChsZWZ0T2JqLmNvdW50KSB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuICAgICAgd2luZG93Ll9zY3JpcHRMb2FkU3RhdGVbc2NyaXB0S2V5XSA9IExPQURJTkdfU1RBVEUuTE9BREVEXHJcbiAgICAgIHdpbmRvdy5fbG9hZGluZ0NhbGxiYWNrc1tzY3JpcHRLZXldLmZvckVhY2goKGM6ICgpID0+IHZvaWQpID0+IHtcclxuICAgICAgICBjKClcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN3aXRjaERpc3BsYXkoc2VsZWN0b3I6IHN0cmluZywgc3RhdGU6IHN0cmluZykge1xyXG4gIEFycmF5LnByb3RvdHlwZS5zbGljZVxyXG4gICAgLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpXHJcbiAgICAuZm9yRWFjaCgobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcclxuICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gc3RhdGVcclxuICAgIH0pXHJcbn1cclxuIl19