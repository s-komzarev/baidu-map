import * as tslib_1 from "tslib";
import { Injectable, Inject } from '@angular/core';
import { isBoolean, isNull, omit } from '../helpers/object';
import { nullCheck } from '../helpers/validate';
import { ScriptLoaderConfig } from './scriptLoader';
import { isMapTypeEnum } from '../types/Map';
import { toPoint } from '../helpers/transformer';
import { ScriptLoader } from './scriptLoader';
let MapService = class MapService {
    constructor(config, loader) {
        this.loader = loader;
        nullCheck(config.ak, 'ak must be provided');
        this.config = config;
        this.map = new Promise((resolve) => {
            this.mapResolver = resolve;
        });
    }
    createMap(el, mapOptions) {
        const URL = `https://api.map.baidu.com/api?v=2.0&ak=${this.config.ak}&callback=baidumapinit`;
        return new Promise(resolve => {
            this.loader.load(URL, true, () => {
                const map = new window.BMap.Map(el, omit(mapOptions, 'mapType'));
                this.setOptions(mapOptions);
                this.mapResolver(map);
                resolve(map);
            });
        });
    }
    setOptions(opts) {
        const { disableDragging, enableScrollWheelZoom, disableDoubleClickZoom, enableKeyboard, enableInertialDragging, enableAutoResize, enableContinuousZoom, disablePinchToZoom } = opts;
        if (isBoolean(disableDragging)) {
            this.map.then(map => map[(disableDragging ? 'disable' : 'enable') + 'Dragging']());
        }
        if (isBoolean(enableScrollWheelZoom)) {
            this.map.then(map => map[(enableScrollWheelZoom ? 'enable' : 'disable') + 'ScrollWheelZoom']());
        }
        if (isBoolean(enableAutoResize)) {
            this.map.then(map => map[(enableAutoResize ? 'enable' : 'disable') + 'AutoResize']());
        }
        if (isBoolean(disableDoubleClickZoom)) {
            this.map.then(map => map[(disableDoubleClickZoom ? 'disable' : 'enable') + 'DoubleClickZoom']());
        }
        if (isBoolean(enableKeyboard)) {
            this.map.then(map => map[(enableKeyboard ? 'enable' : 'disable') + 'Keyboard']());
        }
        if (isBoolean(enableInertialDragging)) {
            this.map.then(map => map[(enableInertialDragging ? 'enable' : 'disable') + 'InertialDragging']());
        }
        if (isBoolean(enableContinuousZoom)) {
            this.map.then(map => map[(enableContinuousZoom ? 'enable' : 'disable') + 'ContinuousZoom']());
        }
        if (isBoolean(disablePinchToZoom)) {
            this.map.then(map => map[(disablePinchToZoom ? 'disable' : 'enable') + 'PinchToZoom']());
        }
        if (!isNull(opts.cursor)) {
            this.map.then(map => map.setDefaultCursor(opts.cursor));
        }
        if (!isNull(opts.draggingCursor)) {
            this.map.then(map => map.setDraggingCursor(opts.draggingCursor));
        }
        if (!isNull(opts.currentCity)) {
            this.map.then(map => map.setCurrentCity(opts.currentCity));
        }
        if (!isNull(opts.centerAndZoom)) {
            this.map.then(map => {
                map.centerAndZoom(toPoint(opts.centerAndZoom), opts.centerAndZoom.zoom);
            });
        }
        if (!isNull(opts.mapType)) {
            this.map.then(map => {
                const realType = isMapTypeEnum(opts.mapType)
                    ? window[opts.mapType]
                    : opts.mapType;
                map.setMapType(realType);
            });
        }
    }
    addOverlay(cb) {
        return this.map.then((map) => {
            const overlay = cb(map);
            map.addOverlay(overlay);
            return { map, overlay };
        });
    }
    removeOverlay(overlay) {
        return this.map.then((map) => {
            map.removeOverlay(overlay);
        });
    }
    addTileLayer(cb) {
        return this.map.then((map) => {
            const tilelayer = cb(map);
            map.addTileLayer(tilelayer);
            return { map, tilelayer };
        });
    }
    removeTileLayer(tilelayer) {
        return this.map.then((map) => {
            map.removeOverlay(tilelayer);
        });
    }
    addControl(cb) {
        return this.map.then((map) => {
            const control = cb(map);
            map.addControl(control);
            return { map, control };
        });
    }
    removeControl(control) {
        return this.map.then((map) => {
            map.removeControl(control);
        });
    }
    getNativeMap() {
        return this.map;
    }
};
MapService.ctorParameters = () => [
    { type: ScriptLoaderConfig, decorators: [{ type: Inject, args: [ScriptLoaderConfig,] }] },
    { type: ScriptLoader }
];
MapService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, Inject(ScriptLoaderConfig))
], MapService);
export { MapService };
//# sourceMappingURL=data:application/json;base64,