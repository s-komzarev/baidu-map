var BaiduMapModule_1;
import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { ControlComponent } from './components/control.component';
import { MapComponent } from './components/map.component';
import { MarkerComponent } from './components/marker.component';
import { PolylineComponent } from './components/polyline.component';
import { CircleComponent } from './components/circle.component';
import { PolygonComponent } from './components/polygon.component';
import { HeatmapComponent } from './components/heatmap.component';
import { TileLayerComponent } from './components/tilelayer.component';
import { TrafficLayerComponent } from './components/trafficlayer.component';
import { CanvasLayerComponent } from './components/canvaslayer.component';
import { MarkerClustererComponent } from './components/markerClusterer.component';
import { ScriptLoader, ScriptLoaderConfig } from './providers/scriptLoader';
let BaiduMapModule = BaiduMapModule_1 = class BaiduMapModule {
    static forRoot(config) {
        return {
            ngModule: BaiduMapModule_1,
            providers: [
                { provide: ScriptLoaderConfig, useValue: config },
                ScriptLoader
            ]
        };
    }
};
BaiduMapModule = BaiduMapModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [
            MapComponent,
            MarkerComponent,
            ControlComponent,
            PolylineComponent,
            CircleComponent,
            PolygonComponent,
            HeatmapComponent,
            TileLayerComponent,
            TrafficLayerComponent,
            CanvasLayerComponent,
            MarkerClustererComponent
        ],
        exports: [
            MapComponent,
            MarkerComponent,
            ControlComponent,
            PolylineComponent,
            CircleComponent,
            PolygonComponent,
            HeatmapComponent,
            TileLayerComponent,
            TrafficLayerComponent,
            CanvasLayerComponent,
            MarkerClustererComponent
        ]
    })
], BaiduMapModule);
export { BaiduMapModule };
export { MapTypeEnum } from './types/Map';
export { ControlAnchor, LengthUnit, NavigationControlType, MapTypeControlType } from './types/Control';
export { Animation } from './types/Animation';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMi1iYWlkdS1tYXAvIiwic291cmNlcyI6WyJsaWIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUU3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUNqRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFDekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBQy9ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFBO0FBQ25FLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQTtBQUMvRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUNqRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUNqRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQTtBQUNyRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQTtBQUMzRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQTtBQUN6RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQTtBQUNqRixPQUFPLEVBRUwsWUFBWSxFQUNaLGtCQUFrQixFQUNuQixNQUFNLDBCQUEwQixDQUFBO0FBaUNqQyxJQUFhLGNBQWMsc0JBQTNCLE1BQWEsY0FBYztJQUNsQixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQTJCO1FBQy9DLE9BQU87WUFDTCxRQUFRLEVBQUUsZ0JBQWM7WUFDeEIsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7Z0JBQ2pELFlBQVk7YUFDYjtTQUNGLENBQUE7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQVZZLGNBQWM7SUE1QjFCLFFBQVEsQ0FBQztRQUNSLFlBQVksRUFBRTtZQUNaLFlBQVk7WUFDWixlQUFlO1lBQ2YsZ0JBQWdCO1lBQ2hCLGlCQUFpQjtZQUNqQixlQUFlO1lBQ2YsZ0JBQWdCO1lBQ2hCLGdCQUFnQjtZQUNoQixrQkFBa0I7WUFDbEIscUJBQXFCO1lBQ3JCLG9CQUFvQjtZQUNwQix3QkFBd0I7U0FDekI7UUFDRCxPQUFPLEVBQUU7WUFDUCxZQUFZO1lBQ1osZUFBZTtZQUNmLGdCQUFnQjtZQUNoQixpQkFBaUI7WUFDakIsZUFBZTtZQUNmLGdCQUFnQjtZQUNoQixnQkFBZ0I7WUFDaEIsa0JBQWtCO1lBQ2xCLHFCQUFxQjtZQUNyQixvQkFBb0I7WUFDcEIsd0JBQXdCO1NBQ3pCO0tBQ0YsQ0FBQztHQUNXLGNBQWMsQ0FVMUI7U0FWWSxjQUFjO0FBWTNCLE9BQU8sRUFBNEIsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBeUJuRSxPQUFPLEVBU0wsYUFBYSxFQUViLFVBQVUsRUFFVixxQkFBcUIsRUFJckIsa0JBQWtCLEVBQ25CLE1BQU0saUJBQWlCLENBQUE7QUFNeEIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5cclxuaW1wb3J0IHsgQ29udHJvbENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jb250cm9sLmNvbXBvbmVudCdcclxuaW1wb3J0IHsgTWFwQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL21hcC5jb21wb25lbnQnXHJcbmltcG9ydCB7IE1hcmtlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9tYXJrZXIuY29tcG9uZW50J1xyXG5pbXBvcnQgeyBQb2x5bGluZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9wb2x5bGluZS5jb21wb25lbnQnXHJcbmltcG9ydCB7IENpcmNsZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jaXJjbGUuY29tcG9uZW50J1xyXG5pbXBvcnQgeyBQb2x5Z29uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3BvbHlnb24uY29tcG9uZW50J1xyXG5pbXBvcnQgeyBIZWF0bWFwQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2hlYXRtYXAuY29tcG9uZW50J1xyXG5pbXBvcnQgeyBUaWxlTGF5ZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvdGlsZWxheWVyLmNvbXBvbmVudCdcclxuaW1wb3J0IHsgVHJhZmZpY0xheWVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3RyYWZmaWNsYXllci5jb21wb25lbnQnXHJcbmltcG9ydCB7IENhbnZhc0xheWVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2NhbnZhc2xheWVyLmNvbXBvbmVudCdcclxuaW1wb3J0IHsgTWFya2VyQ2x1c3RlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL21hcmtlckNsdXN0ZXJlci5jb21wb25lbnQnXHJcbmltcG9ydCB7XHJcbiAgTE9BRElOR19TVEFURSxcclxuICBTY3JpcHRMb2FkZXIsXHJcbiAgU2NyaXB0TG9hZGVyQ29uZmlnXHJcbn0gZnJvbSAnLi9wcm92aWRlcnMvc2NyaXB0TG9hZGVyJ1xyXG5cclxuaW1wb3J0IHsgQk1hcCB9IGZyb20gJy4vdHlwZXMvQk1hcCdcclxuaW1wb3J0IHsgQk1hcExpYiB9IGZyb20gJy4vdHlwZXMvQk1hcExpYidcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBNYXBDb21wb25lbnQsXHJcbiAgICBNYXJrZXJDb21wb25lbnQsXHJcbiAgICBDb250cm9sQ29tcG9uZW50LFxyXG4gICAgUG9seWxpbmVDb21wb25lbnQsXHJcbiAgICBDaXJjbGVDb21wb25lbnQsXHJcbiAgICBQb2x5Z29uQ29tcG9uZW50LFxyXG4gICAgSGVhdG1hcENvbXBvbmVudCxcclxuICAgIFRpbGVMYXllckNvbXBvbmVudCxcclxuICAgIFRyYWZmaWNMYXllckNvbXBvbmVudCxcclxuICAgIENhbnZhc0xheWVyQ29tcG9uZW50LFxyXG4gICAgTWFya2VyQ2x1c3RlcmVyQ29tcG9uZW50XHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBNYXBDb21wb25lbnQsXHJcbiAgICBNYXJrZXJDb21wb25lbnQsXHJcbiAgICBDb250cm9sQ29tcG9uZW50LFxyXG4gICAgUG9seWxpbmVDb21wb25lbnQsXHJcbiAgICBDaXJjbGVDb21wb25lbnQsXHJcbiAgICBQb2x5Z29uQ29tcG9uZW50LFxyXG4gICAgSGVhdG1hcENvbXBvbmVudCxcclxuICAgIFRpbGVMYXllckNvbXBvbmVudCxcclxuICAgIFRyYWZmaWNMYXllckNvbXBvbmVudCxcclxuICAgIENhbnZhc0xheWVyQ29tcG9uZW50LFxyXG4gICAgTWFya2VyQ2x1c3RlcmVyQ29tcG9uZW50XHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQmFpZHVNYXBNb2R1bGUge1xyXG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChjb25maWc/OiBTY3JpcHRMb2FkZXJDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBCYWlkdU1hcE1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgeyBwcm92aWRlOiBTY3JpcHRMb2FkZXJDb25maWcsIHVzZVZhbHVlOiBjb25maWcgfSxcclxuICAgICAgICBTY3JpcHRMb2FkZXJcclxuICAgICAgXVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQk1hcEluc3RhbmNlLCBNYXBPcHRpb25zLCBNYXBUeXBlRW51bSB9IGZyb20gJy4vdHlwZXMvTWFwJ1xyXG5leHBvcnQgeyBCTWFwVHlwZSB9IGZyb20gJy4vdHlwZXMvTWFwVHlwZSdcclxuZXhwb3J0IHsgQlByb2plY3Rpb24gfSBmcm9tICcuL3R5cGVzL1Byb2plY3Rpb24nXHJcbmV4cG9ydCB7IFBvaW50IH0gZnJvbSAnLi90eXBlcy9Qb2ludCdcclxuZXhwb3J0IHsgQk1hcmtlciwgTWFya2VyLCBNYXJrZXJPcHRpb25zIH0gZnJvbSAnLi90eXBlcy9NYXJrZXInXHJcbmV4cG9ydCB7IEJQb2x5bGluZSwgUG9seWxpbmVPcHRpb25zIH0gZnJvbSAnLi90eXBlcy9Qb2x5bGluZSdcclxuZXhwb3J0IHsgQkNpcmNsZSwgQ2lyY2xlT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMvQ2lyY2xlJ1xyXG5leHBvcnQgeyBCUG9seWdvbiwgUG9seWdvbk9wdGlvbnMgfSBmcm9tICcuL3R5cGVzL1BvbHlnb24nXHJcbmV4cG9ydCB7IEJIZWF0bWFwLCBIZWF0bWFwT3B0aW9ucywgSGVhdG1hcERhdGEgfSBmcm9tICcuL3R5cGVzL0hlYXRtYXAnXHJcbmV4cG9ydCB7XHJcbiAgQlRpbGVMYXllcixcclxuICBUaWxlTGF5ZXJPcHRpb25zLFxyXG4gIEdldFRpbGVzVXJsRnVuYyBhcyBnZXRUaWxlc1VybEZ1bmNcclxufSBmcm9tICcuL3R5cGVzL1RpbGVMYXllcidcclxuZXhwb3J0IHtcclxuICBCVHJhZmZpY0xheWVyLFxyXG4gIFRyYWZmaWNMYXllck9wdGlvbnMsXHJcbiAgUHJlZGljdERhdGVcclxufSBmcm9tICcuL3R5cGVzL1RyYWZmaWNMYXllcidcclxuZXhwb3J0IHsgQkNhbnZhc0xheWVyLCBDYW52YXNMYXllck9wdGlvbnMgfSBmcm9tICcuL3R5cGVzL0NhbnZhc0xheWVyJ1xyXG5leHBvcnQge1xyXG4gIEJNYXJrZXJDbHVzdGVyZXIsXHJcbiAgTWFya2VyQ2x1c3RlcmVyT3B0aW9uc1xyXG59IGZyb20gJy4vdHlwZXMvTWFya2VyQ2x1c3RlcmVyJ1xyXG5leHBvcnQgeyBUZXh0SWNvblN0eWxlIH0gZnJvbSAnLi90eXBlcy9UZXh0SWNvbk92ZXJsYXknXHJcbmV4cG9ydCB7XHJcbiAgQkNvbnRyb2wsXHJcbiAgQk5hdmlnYXRpb25Db250cm9sLFxyXG4gIEJPdmVydmlld01hcENvbnRyb2wsXHJcbiAgQlNjYWxlQ29udHJvbCxcclxuICBCTWFwVHlwZUNvbnRyb2wsXHJcbiAgQkdlb2xvY2F0aW9uQ29udHJvbCxcclxuICBCUGFub3JhbWFDb250cm9sQ29udHJvbCxcclxuICBDb250cm9sVHlwZSxcclxuICBDb250cm9sQW5jaG9yLFxyXG4gIEdlb2xvY2F0aW9uQ29udHJvbE9wdGlvbnMsXHJcbiAgTGVuZ3RoVW5pdCxcclxuICBOYXZpZ2F0aW9uQ29udHJvbE9wdGlvbnMsXHJcbiAgTmF2aWdhdGlvbkNvbnRyb2xUeXBlLFxyXG4gIE92ZXJ2aWV3TWFwQ29udHJvbE9wdGlvbnMsXHJcbiAgU2NhbGVDb250cm9sT3B0aW9ucyxcclxuICBNYXBUeXBlQ29udHJvbE9wdGlvbnMsXHJcbiAgTWFwVHlwZUNvbnRyb2xUeXBlXHJcbn0gZnJvbSAnLi90eXBlcy9Db250cm9sJ1xyXG5leHBvcnQge1xyXG4gIEJJbmZvV2luZG93Q29uc3RydWN0b3IsXHJcbiAgQkluZm9XaW5kb3dPcHRpb25zLFxyXG4gIEJJbmZvV2luZG93XHJcbn0gZnJvbSAnLi90eXBlcy9JbmZvV2luZG93J1xyXG5leHBvcnQgeyBBbmltYXRpb24gfSBmcm9tICcuL3R5cGVzL0FuaW1hdGlvbidcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgIF9zY3JpcHRMb2FkU3RhdGU6IHsgW3VybDogc3RyaW5nXTogTE9BRElOR19TVEFURSB9XHJcbiAgICBfbG9hZGluZ0NhbGxiYWNrczogeyBbdXJsOiBzdHJpbmddOiBBcnJheTwoKSA9PiB2b2lkPiB9XHJcbiAgICBCTWFwOiBCTWFwXHJcbiAgICBCTWFwTGliOiBCTWFwTGliXHJcbiAgICBiYWlkdW1hcGluaXQ6ICgpID0+IHZvaWRcclxuICAgIEJNQVBfUEVSU1BFQ1RJVkVfTUFQOiBhbnlcclxuICB9XHJcbn1cclxuIl19