import * as tslib_1 from "tslib";
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { nullCheck } from '../helpers/validate';
import { isUndefined } from '../helpers/object';
import { toMarkerClustererOptions, toTextIconStyle, createMarker } from '../helpers/transformer';
import { MapService } from '../providers/mapService';
import { ScriptLoader } from '../providers/scriptLoader';
const LIB_URLS = {
    key: 'markerClusterer',
    scripts: [
        'https://api.map.baidu.com/library/MarkerClusterer/1.2/src/MarkerClusterer_min.js',
        'https://api.map.baidu.com/library/TextIconOverlay/1.2/src/TextIconOverlay_min.js'
    ]
};
let MarkerClustererComponent = class MarkerClustererComponent {
    constructor(service, scriptLoader) {
        this.service = service;
        this.scriptLoader = scriptLoader;
        this.loaded = new EventEmitter();
    }
    ngOnInit() {
        nullCheck(this.options, 'options is required for <marker-clusterer>');
        this.service.getNativeMap().then((map) => {
            return this.scriptLoader.load(LIB_URLS, false, () => {
                this.markerClusterer = new window.BMapLib.MarkerClusterer(map, toMarkerClustererOptions(this.options));
                this.loaded.emit(this.markerClusterer);
            });
        });
    }
    ngOnChanges(changes) {
        if (changes.options && !changes.options.isFirstChange()) {
            this.resetOptions(changes.options.currentValue);
        }
    }
    resetOptions(options) {
        if (options.markers) {
            this.markerClusterer.clearMarkers();
            this.markerClusterer.addMarkers(options.markers.map(m => createMarker(m.point, m.options)));
        }
        if (!isUndefined(options.girdSize)) {
            this.markerClusterer.setGridSize(options.girdSize);
        }
        if (!isUndefined(options.maxZoom)) {
            this.markerClusterer.setMaxZoom(options.maxZoom);
        }
        if (options.styles) {
            this.markerClusterer.setStyles(options.styles.filter(s => s).map(s => toTextIconStyle(s)));
        }
    }
    ngOnDestroy() {
        this.markerClusterer.clearMarkers();
    }
};
MarkerClustererComponent.ctorParameters = () => [
    { type: MapService },
    { type: ScriptLoader }
];
tslib_1.__decorate([
    Input()
], MarkerClustererComponent.prototype, "options", void 0);
tslib_1.__decorate([
    Output()
], MarkerClustererComponent.prototype, "loaded", void 0);
MarkerClustererComponent = tslib_1.__decorate([
    Directive({
        selector: 'marker-clusterer'
    })
], MarkerClustererComponent);
export { MarkerClustererComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VyQ2x1c3RlcmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLWJhaWR1LW1hcC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL21hcmtlckNsdXN0ZXJlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFJTCxNQUFNLEVBRVAsTUFBTSxlQUFlLENBQUE7QUFFdEIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFBO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUMvQyxPQUFPLEVBQ0wsd0JBQXdCLEVBR3hCLGVBQWUsRUFDZixZQUFZLEVBQ2IsTUFBTSx3QkFBd0IsQ0FBQTtBQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFLcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBR3hELE1BQU0sUUFBUSxHQUFHO0lBQ2YsR0FBRyxFQUFFLGlCQUFpQjtJQUN0QixPQUFPLEVBQUU7UUFDUCxrRkFBa0Y7UUFDbEYsa0ZBQWtGO0tBQ25GO0NBQ0YsQ0FBQTtBQUtELElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXdCO0lBT25DLFlBQ1UsT0FBbUIsRUFDbkIsWUFBMEI7UUFEMUIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQU5sQixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQTtJQU96QyxDQUFDO0lBRUUsUUFBUTtRQUNiLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLDRDQUE0QyxDQUFDLENBQUE7UUFFckUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFpQixFQUFFLEVBQUU7WUFDckQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDbEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUN2RCxHQUFHLEVBQ0gsd0JBQXdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUN2QyxDQUFBO2dCQUVELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQTtZQUN4QyxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVNLFdBQVcsQ0FBQyxPQUFpRDtRQUNsRSxJQUFJLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFO1lBQ3ZELElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQTtTQUNoRDtJQUNILENBQUM7SUFFTyxZQUFZLENBQUMsT0FBK0I7UUFDbEQsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ25CLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUE7WUFDbkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQzdCLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUNqQixDQUFDLENBQUMsRUFBRSxDQUNGLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FDbkMsQ0FDRixDQUFBO1NBQ0Y7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNsQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7U0FDbkQ7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7U0FDakQ7UUFDRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQzVCLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzNELENBQUE7U0FDRjtJQUNILENBQUM7SUFFTSxXQUFXO1FBQ2hCLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUE7SUFDckMsQ0FBQztDQUNGLENBQUE7O1lBbkRvQixVQUFVO1lBQ0wsWUFBWTs7QUFSM0I7SUFBUixLQUFLLEVBQUU7eURBQXdDO0FBRXRDO0lBQVQsTUFBTSxFQUFFO3dEQUFvQztBQUhsQyx3QkFBd0I7SUFIcEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGtCQUFrQjtLQUM3QixDQUFDO0dBQ1csd0JBQXdCLENBMkRwQztTQTNEWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSW5wdXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIE9uRGVzdHJveSxcclxuICBPbkluaXQsXHJcbiAgT3V0cHV0LFxyXG4gIFNpbXBsZUNoYW5nZVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcblxyXG5pbXBvcnQgeyBudWxsQ2hlY2sgfSBmcm9tICcuLi9oZWxwZXJzL3ZhbGlkYXRlJ1xyXG5pbXBvcnQgeyBpc1VuZGVmaW5lZCB9IGZyb20gJy4uL2hlbHBlcnMvb2JqZWN0J1xyXG5pbXBvcnQge1xyXG4gIHRvTWFya2VyQ2x1c3RlcmVyT3B0aW9ucyxcclxuICB0b1BvaW50LFxyXG4gIHRvTWFya2VyT3B0aW9ucyxcclxuICB0b1RleHRJY29uU3R5bGUsXHJcbiAgY3JlYXRlTWFya2VyXHJcbn0gZnJvbSAnLi4vaGVscGVycy90cmFuc2Zvcm1lcidcclxuaW1wb3J0IHsgTWFwU2VydmljZSB9IGZyb20gJy4uL3Byb3ZpZGVycy9tYXBTZXJ2aWNlJ1xyXG5pbXBvcnQge1xyXG4gIE1hcmtlckNsdXN0ZXJlck9wdGlvbnMsXHJcbiAgQk1hcmtlckNsdXN0ZXJlclxyXG59IGZyb20gJy4uL3R5cGVzL01hcmtlckNsdXN0ZXJlcidcclxuaW1wb3J0IHsgU2NyaXB0TG9hZGVyIH0gZnJvbSAnLi4vcHJvdmlkZXJzL3NjcmlwdExvYWRlcidcclxuaW1wb3J0IHsgQk1hcEluc3RhbmNlIH0gZnJvbSAnLi4vdHlwZXMvTWFwJ1xyXG5cclxuY29uc3QgTElCX1VSTFMgPSB7XHJcbiAga2V5OiAnbWFya2VyQ2x1c3RlcmVyJyxcclxuICBzY3JpcHRzOiBbXHJcbiAgICAnaHR0cHM6Ly9hcGkubWFwLmJhaWR1LmNvbS9saWJyYXJ5L01hcmtlckNsdXN0ZXJlci8xLjIvc3JjL01hcmtlckNsdXN0ZXJlcl9taW4uanMnLFxyXG4gICAgJ2h0dHBzOi8vYXBpLm1hcC5iYWlkdS5jb20vbGlicmFyeS9UZXh0SWNvbk92ZXJsYXkvMS4yL3NyYy9UZXh0SWNvbk92ZXJsYXlfbWluLmpzJ1xyXG4gIF1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdtYXJrZXItY2x1c3RlcmVyJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTWFya2VyQ2x1c3RlcmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgQElucHV0KCkgcHJpdmF0ZSBvcHRpb25zOiBNYXJrZXJDbHVzdGVyZXJPcHRpb25zXHJcblxyXG4gIEBPdXRwdXQoKSBwcml2YXRlIGxvYWRlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKVxyXG5cclxuICBwcml2YXRlIG1hcmtlckNsdXN0ZXJlcjogQk1hcmtlckNsdXN0ZXJlclxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgc2VydmljZTogTWFwU2VydmljZSxcclxuICAgIHByaXZhdGUgc2NyaXB0TG9hZGVyOiBTY3JpcHRMb2FkZXJcclxuICApIHsgfVxyXG5cclxuICBwdWJsaWMgbmdPbkluaXQoKSB7XHJcbiAgICBudWxsQ2hlY2sodGhpcy5vcHRpb25zLCAnb3B0aW9ucyBpcyByZXF1aXJlZCBmb3IgPG1hcmtlci1jbHVzdGVyZXI+JylcclxuXHJcbiAgICB0aGlzLnNlcnZpY2UuZ2V0TmF0aXZlTWFwKCkudGhlbigobWFwOiBCTWFwSW5zdGFuY2UpID0+IHtcclxuICAgICAgcmV0dXJuIHRoaXMuc2NyaXB0TG9hZGVyLmxvYWQoTElCX1VSTFMsIGZhbHNlLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5tYXJrZXJDbHVzdGVyZXIgPSBuZXcgd2luZG93LkJNYXBMaWIuTWFya2VyQ2x1c3RlcmVyKFxyXG4gICAgICAgICAgbWFwLFxyXG4gICAgICAgICAgdG9NYXJrZXJDbHVzdGVyZXJPcHRpb25zKHRoaXMub3B0aW9ucylcclxuICAgICAgICApXHJcblxyXG4gICAgICAgIHRoaXMubG9hZGVkLmVtaXQodGhpcy5tYXJrZXJDbHVzdGVyZXIpXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHsgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlIH0pIHtcclxuICAgIGlmIChjaGFuZ2VzLm9wdGlvbnMgJiYgIWNoYW5nZXMub3B0aW9ucy5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgdGhpcy5yZXNldE9wdGlvbnMoY2hhbmdlcy5vcHRpb25zLmN1cnJlbnRWYWx1ZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVzZXRPcHRpb25zKG9wdGlvbnM6IE1hcmtlckNsdXN0ZXJlck9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zLm1hcmtlcnMpIHtcclxuICAgICAgdGhpcy5tYXJrZXJDbHVzdGVyZXIuY2xlYXJNYXJrZXJzKClcclxuICAgICAgdGhpcy5tYXJrZXJDbHVzdGVyZXIuYWRkTWFya2VycyhcclxuICAgICAgICBvcHRpb25zLm1hcmtlcnMubWFwKFxyXG4gICAgICAgICAgbSA9PlxyXG4gICAgICAgICAgICBjcmVhdGVNYXJrZXIobS5wb2ludCwgbS5vcHRpb25zKVxyXG4gICAgICAgIClcclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgaWYgKCFpc1VuZGVmaW5lZChvcHRpb25zLmdpcmRTaXplKSkge1xyXG4gICAgICB0aGlzLm1hcmtlckNsdXN0ZXJlci5zZXRHcmlkU2l6ZShvcHRpb25zLmdpcmRTaXplKVxyXG4gICAgfVxyXG4gICAgaWYgKCFpc1VuZGVmaW5lZChvcHRpb25zLm1heFpvb20pKSB7XHJcbiAgICAgIHRoaXMubWFya2VyQ2x1c3RlcmVyLnNldE1heFpvb20ob3B0aW9ucy5tYXhab29tKVxyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMuc3R5bGVzKSB7XHJcbiAgICAgIHRoaXMubWFya2VyQ2x1c3RlcmVyLnNldFN0eWxlcyhcclxuICAgICAgICBvcHRpb25zLnN0eWxlcy5maWx0ZXIocyA9PiBzKS5tYXAocyA9PiB0b1RleHRJY29uU3R5bGUocykpXHJcbiAgICAgIClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMubWFya2VyQ2x1c3RlcmVyLmNsZWFyTWFya2VycygpXHJcbiAgfVxyXG59XHJcbiJdfQ==