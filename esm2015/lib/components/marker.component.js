import * as tslib_1 from "tslib";
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { isNull } from '../helpers/object';
import { toIcon, toMarkerOptions, toPoint, toSize } from '../helpers/transformer';
import { nullCheck } from '../helpers/validate';
import { MapService } from '../providers/mapService';
let MarkerComponent = class MarkerComponent {
    constructor(service) {
        this.service = service;
        this.loaded = new EventEmitter();
        this.clicked = new EventEmitter();
    }
    ngOnInit() {
        nullCheck(this.point, 'point is required for <marker>');
        this.marker = new window.BMap.Marker(toPoint(this.point), toMarkerOptions(this.options));
        if (this.options.label) {
            this.marker.setLabel(new window.BMap.Label(this.options.label));
        }
        this.service
            .addOverlay(() => {
            return this.marker;
        })
            .then(({ map }) => {
            this.loaded.emit(this.marker);
            this.addListener(this.marker, map);
        })
            .then(() => {
            // workaround: it's weird that postion is set while constructing phase will make click event not working
            this.marker.setPosition(new window.BMap.Point(this.point.lng, this.point.lat));
        });
    }
    ngOnChanges(changes) {
        if (changes.point && !changes.point.isFirstChange()) {
            this.marker.setPosition(toPoint(changes.point.currentValue));
        }
        if (changes.options && !changes.options.isFirstChange()) {
            this.setOptions(changes.options.currentValue);
        }
    }
    ngOnDestroy() {
        this.service.removeOverlay(this.marker);
    }
    setOptions(options) {
        if (isNull(options)) {
            return;
        }
        if (!isNull(options.offset)) {
            this.marker.setOffset(toSize(options.offset));
        }
        if (!isNull(options.icon)) {
            this.marker.setIcon(toIcon(options.icon.imageUrl, options.icon.size, options.icon));
        }
        if (!isNull(options.enableMassClear)) {
            this.marker[(options.enableMassClear ? 'enable' : 'disable') + 'MassClear']();
        }
        if (!isNull(options.enableDragging)) {
            this.marker[(options.enableDragging ? 'enable' : 'disable') + 'Dragging']();
        }
        if (!isNull(options.rotation)) {
            this.marker.setRotation(options.rotation);
        }
        if (!isNull(options.shadow)) {
            this.marker.setShadow(toIcon(options.shadow.imageUrl, options.shadow.size, options.shadow));
        }
        if (!isNull(options.title)) {
            this.marker.setTitle(options.title);
        }
    }
    addListener(marker, map) {
        marker.addEventListener('click', (e) => {
            this.clicked.emit({
                e,
                map,
                marker
            });
        });
    }
};
MarkerComponent.ctorParameters = () => [
    { type: MapService }
];
tslib_1.__decorate([
    Input()
], MarkerComponent.prototype, "point", void 0);
tslib_1.__decorate([
    Input()
], MarkerComponent.prototype, "options", void 0);
tslib_1.__decorate([
    Output()
], MarkerComponent.prototype, "loaded", void 0);
tslib_1.__decorate([
    Output()
], MarkerComponent.prototype, "clicked", void 0);
MarkerComponent = tslib_1.__decorate([
    Directive({
        selector: 'marker'
    })
], MarkerComponent);
export { MarkerComponent };
//# sourceMappingURL=data:application/json;base64,