import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { isString } from '../helpers/object';
export var LOADING_STATE;
(function (LOADING_STATE) {
    LOADING_STATE[LOADING_STATE["NON"] = 0] = "NON";
    LOADING_STATE[LOADING_STATE["LOADED"] = 1] = "LOADED";
    LOADING_STATE[LOADING_STATE["LOADING"] = 2] = "LOADING";
})(LOADING_STATE || (LOADING_STATE = {}));
var ScriptLoaderConfig = /** @class */ (function () {
    function ScriptLoaderConfig() {
        this.ak = '';
    }
    return ScriptLoaderConfig;
}());
export { ScriptLoaderConfig };
var ScriptLoader = /** @class */ (function () {
    function ScriptLoader() {
        window._scriptLoadState = {};
        window._loadingCallbacks = {};
    }
    ScriptLoader.prototype.load = function (url, isMain, cb) {
        if (isMain === void 0) { isMain = false; }
        // tslint:disable: no-string-literal
        var scriptKey = isString(url) ? url : url['key'];
        var scriptUrls = isString(url) ? [url] : url['scripts'];
        // tslint:enable: no-string-literal
        if (window._scriptLoadState[scriptKey] === LOADING_STATE.LOADED) {
            if (isMain) {
                switchDisplay('baidu-map .baidu-map-instance', 'block');
                switchDisplay('baidu-map .baidu-map-offline', 'none');
            }
            return cb();
        }
        if (!window._loadingCallbacks[scriptKey]) {
            window._loadingCallbacks[scriptKey] = [];
        }
        if (window._scriptLoadState[scriptKey] === LOADING_STATE.LOADING) {
            window._loadingCallbacks[scriptKey].push(cb);
            return;
        }
        window._scriptLoadState[scriptKey] = LOADING_STATE.LOADING;
        window._loadingCallbacks[scriptKey].push(cb);
        if (isMain) {
            window.baidumapinit = function () {
                window._scriptLoadState[scriptKey] = LOADING_STATE.LOADED;
                switchDisplay('baidu-map .baidu-map-instance', 'block');
                switchDisplay('baidu-map .baidu-map-offline', 'none');
                window._loadingCallbacks[scriptKey].forEach(function (c) {
                    c();
                });
            };
        }
        appendScriptsTag(scriptKey, scriptUrls, isMain);
    };
    ScriptLoader = tslib_1.__decorate([
        Injectable()
    ], ScriptLoader);
    return ScriptLoader;
}());
export { ScriptLoader };
function appendScriptsTag(scriptKey, urls, isMain) {
    var leftObj = {
        count: urls.length
    };
    urls.forEach(function (url) {
        appendScriptTag(scriptKey, url, isMain, leftObj);
    });
}
function appendScriptTag(scriptKey, url, isMain, leftObj) {
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;
    script.onerror = function () {
        if (isMain) {
            switchDisplay('baidu-map .baidu-map-offline', 'block');
            switchDisplay('baidu-map .baidu-map-instance', 'none');
        }
        document.body.removeChild(script);
        setTimeout(function () {
            appendScriptTag(scriptKey, url, isMain, leftObj);
        }, 30000);
    };
    if (!isMain) {
        script.onload = function () {
            leftObj.count--;
            if (leftObj.count) {
                return;
            }
            window._scriptLoadState[scriptKey] = LOADING_STATE.LOADED;
            window._loadingCallbacks[scriptKey].forEach(function (c) {
                c();
            });
        };
    }
    document.body.appendChild(script);
}
function switchDisplay(selector, state) {
    Array.prototype.slice
        .call(document.querySelectorAll(selector))
        .forEach(function (node) {
        node.style.display = state;
    });
}
//# sourceMappingURL=data:application/json;base64,