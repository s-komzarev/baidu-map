import * as tslib_1 from "tslib";
import { Injectable, Inject } from '@angular/core';
import { isBoolean, isNull, omit } from '../helpers/object';
import { nullCheck } from '../helpers/validate';
import { ScriptLoaderConfig } from './scriptLoader';
import { isMapTypeEnum } from '../types/Map';
import { toPoint } from '../helpers/transformer';
import { ScriptLoader } from './scriptLoader';
var MapService = /** @class */ (function () {
    function MapService(config, loader) {
        var _this = this;
        this.loader = loader;
        nullCheck(config.ak, 'ak must be provided');
        this.config = config;
        this.map = new Promise(function (resolve) {
            _this.mapResolver = resolve;
        });
    }
    MapService.prototype.createMap = function (el, mapOptions) {
        var _this = this;
        var URL = "https://api.map.baidu.com/api?v=2.0&ak=" + this.config.ak + "&callback=baidumapinit";
        return new Promise(function (resolve) {
            _this.loader.load(URL, true, function () {
                var map = new window.BMap.Map(el, omit(mapOptions, 'mapType'));
                _this.setOptions(mapOptions);
                _this.mapResolver(map);
                resolve(map);
            });
        });
    };
    MapService.prototype.setOptions = function (opts) {
        var disableDragging = opts.disableDragging, enableScrollWheelZoom = opts.enableScrollWheelZoom, disableDoubleClickZoom = opts.disableDoubleClickZoom, enableKeyboard = opts.enableKeyboard, enableInertialDragging = opts.enableInertialDragging, enableAutoResize = opts.enableAutoResize, enableContinuousZoom = opts.enableContinuousZoom, disablePinchToZoom = opts.disablePinchToZoom;
        if (isBoolean(disableDragging)) {
            this.map.then(function (map) {
                return map[(disableDragging ? 'disable' : 'enable') + 'Dragging']();
            });
        }
        if (isBoolean(enableScrollWheelZoom)) {
            this.map.then(function (map) {
                return map[(enableScrollWheelZoom ? 'enable' : 'disable') + 'ScrollWheelZoom']();
            });
        }
        if (isBoolean(enableAutoResize)) {
            this.map.then(function (map) {
                return map[(enableAutoResize ? 'enable' : 'disable') + 'AutoResize']();
            });
        }
        if (isBoolean(disableDoubleClickZoom)) {
            this.map.then(function (map) {
                return map[(disableDoubleClickZoom ? 'disable' : 'enable') + 'DoubleClickZoom']();
            });
        }
        if (isBoolean(enableKeyboard)) {
            this.map.then(function (map) {
                return map[(enableKeyboard ? 'enable' : 'disable') + 'Keyboard']();
            });
        }
        if (isBoolean(enableInertialDragging)) {
            this.map.then(function (map) {
                return map[(enableInertialDragging ? 'enable' : 'disable') + 'InertialDragging']();
            });
        }
        if (isBoolean(enableContinuousZoom)) {
            this.map.then(function (map) {
                return map[(enableContinuousZoom ? 'enable' : 'disable') + 'ContinuousZoom']();
            });
        }
        if (isBoolean(disablePinchToZoom)) {
            this.map.then(function (map) {
                return map[(disablePinchToZoom ? 'disable' : 'enable') + 'PinchToZoom']();
            });
        }
        if (!isNull(opts.cursor)) {
            this.map.then(function (map) { return map.setDefaultCursor(opts.cursor); });
        }
        if (!isNull(opts.draggingCursor)) {
            this.map.then(function (map) { return map.setDraggingCursor(opts.draggingCursor); });
        }
        if (!isNull(opts.currentCity)) {
            this.map.then(function (map) { return map.setCurrentCity(opts.currentCity); });
        }
        if (!isNull(opts.centerAndZoom)) {
            this.map.then(function (map) {
                map.centerAndZoom(toPoint(opts.centerAndZoom), opts.centerAndZoom.zoom);
            });
        }
        if (!isNull(opts.mapType)) {
            this.map.then(function (map) {
                var realType = isMapTypeEnum(opts.mapType)
                    ? window[opts.mapType]
                    : opts.mapType;
                map.setMapType(realType);
            });
        }
    };
    MapService.prototype.addOverlay = function (cb) {
        return this.map.then(function (map) {
            var overlay = cb(map);
            map.addOverlay(overlay);
            return { map: map, overlay: overlay };
        });
    };
    MapService.prototype.removeOverlay = function (overlay) {
        return this.map.then(function (map) {
            map.removeOverlay(overlay);
        });
    };
    MapService.prototype.addTileLayer = function (cb) {
        return this.map.then(function (map) {
            var tilelayer = cb(map);
            map.addTileLayer(tilelayer);
            return { map: map, tilelayer: tilelayer };
        });
    };
    MapService.prototype.removeTileLayer = function (tilelayer) {
        return this.map.then(function (map) {
            map.removeOverlay(tilelayer);
        });
    };
    MapService.prototype.addControl = function (cb) {
        return this.map.then(function (map) {
            var control = cb(map);
            map.addControl(control);
            return { map: map, control: control };
        });
    };
    MapService.prototype.removeControl = function (control) {
        return this.map.then(function (map) {
            map.removeControl(control);
        });
    };
    MapService.prototype.getNativeMap = function () {
        return this.map;
    };
    MapService.ctorParameters = function () { return [
        { type: ScriptLoaderConfig, decorators: [{ type: Inject, args: [ScriptLoaderConfig,] }] },
        { type: ScriptLoader }
    ]; };
    MapService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(ScriptLoaderConfig))
    ], MapService);
    return MapService;
}());
export { MapService };
//# sourceMappingURL=data:application/json;base64,